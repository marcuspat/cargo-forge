name: E2E Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC to catch issues early
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-matrix:
    name: E2E Tests - ${{ matrix.os }} - Rust ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest  
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
          
    - name: Install additional targets (WASM)
      run: rustup target add wasm32-unknown-unknown
      
    - name: Install wasm-pack (for WASM tests)
      if: matrix.os != 'windows-latest'
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
    - name: Install wasm-pack (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "https://github.com/rustwasm/wasm-pack/releases/download/v0.12.1/wasm-pack-init.exe" -OutFile "wasm-pack-init.exe"
        .\wasm-pack-init.exe
        
    - name: Check code formatting
      run: cargo fmt --all -- --check
      
    - name: Lint with Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run unit tests
      run: cargo test --lib --bins
      
    - name: Run integration tests
      run: cargo test --test integration
      
    - name: Run comprehensive E2E tests
      run: cargo test --test e2e_comprehensive
      
    - name: Test all project types compilation
      run: cargo test test_all_project_types_compilation --test integration
      
    - name: Test cross-platform file generation
      run: cargo test test_cross_platform_file_generation --test integration
      
    - name: Test project generation performance
      run: cargo test test_project_generation_performance --test integration

  project-generation-validation:
    name: Project Generation Validation - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Build cargo-forge
      run: cargo build --release
      
    - name: Test CLI tool project generation
      run: |
        ./target/release/cargo-forge new test-cli-generated --project-type cli-tool --author "CI Test <ci@test.com>" --non-interactive
        cd test-cli-generated
        cargo check
        cargo build
        cargo test
        cd ..
        
    - name: Test library project generation
      run: |
        ./target/release/cargo-forge new test-lib-generated --project-type library --author "CI Test <ci@test.com>" --non-interactive
        cd test-lib-generated
        cargo check
        cargo build
        cargo test
        cargo doc
        cd ..
        
    - name: Test API server project generation
      run: |
        ./target/release/cargo-forge new test-api-generated --project-type api-server --author "CI Test <ci@test.com>" --non-interactive
        cd test-api-generated
        cargo check
        cargo build
        cd ..
        
    - name: Test WASM app project generation (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./target/release/cargo-forge new test-wasm-generated --project-type wasm-app --author "CI Test <ci@test.com>" --non-interactive
        cd test-wasm-generated
        cargo check
        chmod +x build.sh
        cd ..
        
    - name: Test WASM app project generation (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\target\release\cargo-forge.exe new test-wasm-generated --project-type wasm-app --author "CI Test <ci@test.com>" --non-interactive
        cd test-wasm-generated
        cargo check
        cd ..
        
    - name: Test game engine project generation
      run: |
        ./target/release/cargo-forge new test-game-generated --project-type game-engine --author "CI Test <ci@test.com>" --non-interactive
        cd test-game-generated
        cargo check
        cd ..
        
    - name: Test workspace project generation
      run: |
        ./target/release/cargo-forge new test-workspace-generated --project-type workspace --author "CI Test <ci@test.com>" --non-interactive
        cd test-workspace-generated
        cargo check
        cargo build
        cd ..

  feature-combinations:
    name: Feature Combinations Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build cargo-forge
      run: cargo build --release
      
    - name: Test feature combination tests
      run: cargo test --test feature_combinations_test
      
    - name: Test auth feature tests
      run: cargo test --test auth_feature_test
      
    - name: Test database feature tests  
      run: cargo test --test database_feature_test
      
    - name: Test cargo.toml feature tests
      run: cargo test --test cargo_toml_feature_test

  security-and-safety:
    name: Security & Safety Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Security audit
      run: cargo audit
      
    - name: Test with sanitizers (Unix only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        rustup component add rust-src
        export RUSTFLAGS="-Z sanitizer=address"
        export RUSTDOCFLAGS="-Z sanitizer=address"
        cargo test --target x86_64-unknown-linux-gnu -Z build-std --test integration
        
    - name: Test error cases
      run: cargo test --test error_cases_test

  documentation:
    name: Documentation Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Test documentation build
      run: cargo doc --all-features --no-deps
      
    - name: Test documentation examples
      run: cargo test --doc
      
    - name: Verify all projects generate proper README files
      run: cargo test test_readme_quality --test e2e_comprehensive

  performance:
    name: Performance Tests - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain  
      uses: dtolnay/rust-toolchain@stable
      
    - name: Performance stress test
      run: cargo test test_project_generation_stress --test e2e_comprehensive --release
      
    - name: Memory usage test
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        cargo build --release
        valgrind --tool=massif --massif-out-file=massif.out ./target/release/cargo-forge new perf-test --project-type library --author "Test <test@test.com>" --non-interactive
        ms_print massif.out

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Generate coverage report
      run: |
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --exclude-files target/* --out xml --output-dir coverage/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage/cobertura.xml
        fail_ci_if_error: true

  nightly-features:
    name: Nightly Features Test
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly
      
    - name: Test with nightly features
      run: |
        # Test any nightly-specific features if they exist
        cargo test --all-features
        
    - name: Benchmark tests (if applicable)
      run: |
        if [ -d "benches" ]; then
          cargo bench --no-run
        fi

  final-validation:
    name: Final E2E Validation
    runs-on: ubuntu-latest
    needs: [test-matrix, project-generation-validation, feature-combinations, security-and-safety]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Final comprehensive test run
      run: |
        cargo test --release
        
    - name: Build final release artifact
      run: |
        cargo build --release
        
    - name: Generate test report
      run: |
        echo "# E2E Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "✅ All project types tested" >> test-summary.md
        echo "✅ Cross-platform compatibility verified" >> test-summary.md  
        echo "✅ Feature combinations validated" >> test-summary.md
        echo "✅ Security audit passed" >> test-summary.md
        echo "✅ Performance tests passed" >> test-summary.md
        echo "" >> test-summary.md
        echo "Generated $(date)" >> test-summary.md
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          test-summary.md
          target/release/cargo-forge